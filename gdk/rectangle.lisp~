(in-package :gdk-cffi)

(defclass rectangle (object)
  ())

(defmacro with-rectangle (rect &body body)
  `(with-object (,rect) (make-instance 'rectangle) ,@body))

(defmethod gconstructor ((rectangle rectangle) &key &allow-other-keys)
  (foreign-alloc 'cairo_rectangle_t))

(defmethod free :before ((rectangle rectangle))
  (foreign-free (pointer rectangle)))

(defcstruct-accessors (rectangle . cairo_rectangle_t)
    x y height width)

(defcfun  gdk-rectangle-intersect :boolean
  (src1 pobject) (src2 pobject) (dest pobject))

(defmethod intersect ((rect1 rectangle) (rect2 rectangle))
   (let ((dest (make-instance 'rectangle)))
     (if (gdk-rectangle-intersect rect1 rect2 dest)
         dest
         (progn (free dest) nil))))

(defcfun gdk-rectangle-union :void
  (src1 pobject) (src2 pobject) (dest pobject))

(defmethod union ((rect1 rectangle) (rect2 rectangle))
   (let ((dest (make-instance 'rectangle)))
     (gdk-rectangle-union rect1 rect2 dest)))

(defcfun gdk-rectangle-get-type g-type)
